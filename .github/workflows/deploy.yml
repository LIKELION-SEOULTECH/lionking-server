name: Backend CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

# 레지스트리 태그를 한 곳에 모아두기
env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/lionking-backend:latest

jobs:
  ci:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test


  cd:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      # 1) 소스 체크아웃 + JAR 빌드
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build
        run: ./gradlew build

      # 2) 도커 이미지 빌드 → Docker Hub 푸시
      - name: Build Docker image
        run: docker build -t $IMAGE_NAME .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Push Docker image
        run: docker push $IMAGE_NAME

      # 3) docker-compose.yml만 EC2로 복사
      - name: Copy compose to EC2
        uses: appleboy/scp-action@v0.1.7

        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "~/lionking-server" #어디로 해야되지

      # 4) EC2로 배포 (compose pull/up)
      - name: Deploy to EC2 with Compose
        uses: appleboy/ssh-action@v0.1.7
        env:                           # ← 추가
          MYSQLDB_USERNAME: ${{ secrets.MYSQLDB_USERNAME }}
          MYSQLDB_PASSWORD: ${{ secrets.MYSQLDB_PASSWORD }}
          MYSQLDB_ROOT_PASSWORD: ${{ secrets.MYSQLDB_ROOT_PASSWORD }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}

          # compose.yml 안에서 ${MYSQLDB_*}, ${DOCKERHUB_USERNAME} 변수를 쓰므로 전달
          envs: MYSQLDB_USERNAME,MYSQLDB_PASSWORD,MYSQLDB_ROOT_PASSWORD,DOCKERHUB_USERNAME,JWT_SECRET,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY

          script: |
            set -e
            cd ~/lionking-server
          
            # 기존 docker-compose 서비스들 정리
            docker compose down --remove-orphans 2>/dev/null || true
          
            # 최신 이미지 가져와 재배치
            docker compose pull
            docker compose up -d --remove-orphans
          
            # 불필요 이미지 정리
            docker image prune -f --filter dangling=true