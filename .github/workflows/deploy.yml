name: Backend CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/lionking-backend:latest

jobs:
  ci:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

  cd:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      # 1) 소스 체크아웃 + JAR 빌드
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build
        run: ./gradlew build

      # 2) 도커 이미지 빌드 → Docker Hub 푸시
      - name: Build Docker image
        run: docker build -t $IMAGE_NAME .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Push Docker image
        run: docker push $IMAGE_NAME

      # 3) .env 파일 생성
      - name: Create .env file
        run: |
          echo "MYSQLDB_USERNAME=${{ secrets.MYSQLDB_USERNAME }}" > .env
          echo "MYSQLDB_PASSWORD=${{ secrets.MYSQLDB_PASSWORD }}" >> .env
          echo "MYSQLDB_ROOT_PASSWORD=${{ secrets.MYSQLDB_ROOT_PASSWORD }}" >> .env
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env

      # 4) docker-compose.yml, .env 파일 EC2로 복사
      - name: Copy compose and .env to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.yml,.env"
          target: "~/lionking-server"

      # 5) EC2에서 docker compose로 배포
      - name: Deploy to EC2 with Compose
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            set -e
            cd ~/lionking-server
            docker compose down --remove-orphans 2>/dev/null || true
            docker container prune -f 2>/dev/null || true
            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -f --filter dangling=true
