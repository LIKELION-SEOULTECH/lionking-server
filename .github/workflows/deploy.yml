name: Backend CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  ci:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

  cd:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build
        run: ./gradlew build

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/choikang7157 .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/choikang7157

      # 3) docker-compose.yml만 EC2로 복사
      - name: Copy compose to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "compose.yml"
          target: "~/lionking-server"

      # 4) EC2로 배포 (compose pull/up)
      - name: Deploy to EC2 with Compose
        uses: appleboy/scp-action@v0.1.4

        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}

          script: |
            set -e
            cd ~/lionking-server

            # 기존 lionking 컨테이너들 정리
            docker stop lionking-server || true
            docker rm lionking-server || true

            # 최신 이미지 가져와 재배치
            docker compose pull
            docker compose up -d --remove-orphans

            # 불필요 이미지 정리
            docker image prune -f --filter dangling=true